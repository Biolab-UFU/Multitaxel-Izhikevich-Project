
TaxelProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003284  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800347c  0800347c  0000447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003494  08003494  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003494  08003494  00004494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800349c  0800349c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800349c  0800349c  0000449c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034a0  080034a0  000044a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  080034b0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080034b0  000052f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd92  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002017  00000000  00000000  00011dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00013de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000960  00000000  00000000  00014a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027161  00000000  00000000  00015368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0c0  00000000  00000000  0003c4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b5b  00000000  00000000  0004a589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001420e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a4  00000000  00000000  00142128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001453cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003464 	.word	0x08003464

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003464 	.word	0x08003464

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800052c:	f000 fa68 	bl	8000a00 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fc0d 	bl	8000d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f80c 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f934 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800053c:	f000 f914 	bl	8000768 <MX_DMA_Init>
  MX_ADC1_Init();
 8000540:	f000 f860 	bl	8000604 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000544:	f000 f8da 	bl	80006fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  app_setup();
 8000548:	f002 ff46 	bl	80033d8 <app_setup>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <main+0x24>

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	@ 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2234      	movs	r2, #52	@ 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f002 ff54 	bl	800340c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <SystemClock_Config+0xac>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a20      	ldr	r2, [pc, #128]	@ (80005fc <SystemClock_Config+0xac>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <SystemClock_Config+0xac>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800058c:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <SystemClock_Config+0xb0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000594:	4a1a      	ldr	r2, [pc, #104]	@ (8000600 <SystemClock_Config+0xb0>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <SystemClock_Config+0xb0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f83e 	bl	800263c <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005c6:	f000 fa47 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005ce:	2301      	movs	r3, #1
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fad7 	bl	8002b98 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005f0:	f000 fa32 	bl	8000a58 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	@ 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000616:	4b36      	ldr	r3, [pc, #216]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000618:	4a36      	ldr	r2, [pc, #216]	@ (80006f4 <MX_ADC1_Init+0xf0>)
 800061a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061c:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <MX_ADC1_Init+0xec>)
 800061e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000622:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000624:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062a:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <MX_ADC1_Init+0xec>)
 800062c:	2201      	movs	r2, #1
 800062e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000630:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000632:	2201      	movs	r2, #1
 8000634:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063e:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000646:	4a2c      	ldr	r2, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0xf4>)
 8000648:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_ADC1_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000652:	2204      	movs	r2, #4
 8000654:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000656:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800065e:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000664:	4822      	ldr	r0, [pc, #136]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000666:	f000 fbcf 	bl	8000e08 <HAL_ADC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000670:	f000 f9f2 	bl	8000a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000674:	2303      	movs	r3, #3
 8000676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000678:	2301      	movs	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800067c:	2301      	movs	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	481a      	ldr	r0, [pc, #104]	@ (80006f0 <MX_ADC1_Init+0xec>)
 8000686:	f000 fe35 	bl	80012f4 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000690:	f000 f9e2 	bl	8000a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000694:	2309      	movs	r3, #9
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000698:	2302      	movs	r3, #2
 800069a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4813      	ldr	r0, [pc, #76]	@ (80006f0 <MX_ADC1_Init+0xec>)
 80006a2:	f000 fe27 	bl	80012f4 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006ac:	f000 f9d4 	bl	8000a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006b0:	230a      	movs	r3, #10
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006b4:	2303      	movs	r3, #3
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <MX_ADC1_Init+0xec>)
 80006be:	f000 fe19 	bl	80012f4 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006c8:	f000 f9c6 	bl	8000a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006cc:	230d      	movs	r3, #13
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_ADC1_Init+0xec>)
 80006da:	f000 fe0b 	bl	80012f4 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006e4:	f000 f9b8 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000028 	.word	0x20000028
 80006f4:	40012000 	.word	0x40012000
 80006f8:	0f000001 	.word	0x0f000001

080006fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_TIM6_Init+0x64>)
 800070e:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <MX_TIM6_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_TIM6_Init+0x64>)
 8000714:	2218      	movs	r2, #24
 8000716:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_TIM6_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_TIM6_Init+0x64>)
 8000720:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000724:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_TIM6_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <MX_TIM6_Init+0x64>)
 800072e:	f002 fbe5 	bl	8002efc <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000738:	f000 f98e 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_TIM6_Init+0x64>)
 800074a:	f002 fd53 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 f980 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000d0 	.word	0x200000d0
 8000764:	40001000 	.word	0x40001000

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_DMA_Init+0x38>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <MX_DMA_Init+0x38>)
 8000774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_DMA_Init+0x38>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2038      	movs	r0, #56	@ 0x38
 800078c:	f001 f969 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000790:	2038      	movs	r0, #56	@ 0x38
 8000792:	f001 f982 	bl	8001a9a <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08e      	sub	sp, #56	@ 0x38
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ba:	4b89      	ldr	r3, [pc, #548]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a88      	ldr	r2, [pc, #544]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 80007c0:	f043 0310 	orr.w	r3, r3, #16
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b86      	ldr	r3, [pc, #536]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	623b      	str	r3, [r7, #32]
 80007d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	4b83      	ldr	r3, [pc, #524]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a82      	ldr	r2, [pc, #520]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 80007d8:	f043 0320 	orr.w	r3, r3, #32
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b80      	ldr	r3, [pc, #512]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0320 	and.w	r3, r3, #32
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b7d      	ldr	r3, [pc, #500]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a7c      	ldr	r2, [pc, #496]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b7a      	ldr	r3, [pc, #488]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b77      	ldr	r3, [pc, #476]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a76      	ldr	r2, [pc, #472]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b74      	ldr	r3, [pc, #464]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b71      	ldr	r3, [pc, #452]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a70      	ldr	r2, [pc, #448]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b6e      	ldr	r3, [pc, #440]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b6b      	ldr	r3, [pc, #428]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a6a      	ldr	r2, [pc, #424]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b68      	ldr	r3, [pc, #416]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	4b65      	ldr	r3, [pc, #404]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a64      	ldr	r2, [pc, #400]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b62      	ldr	r3, [pc, #392]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	4b5f      	ldr	r3, [pc, #380]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a5e      	ldr	r2, [pc, #376]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b5c      	ldr	r3, [pc, #368]	@ (80009e0 <MX_GPIO_Init+0x23c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800087a:	2200      	movs	r2, #0
 800087c:	f243 5184 	movw	r1, #13700	@ 0x3584
 8000880:	4858      	ldr	r0, [pc, #352]	@ (80009e4 <MX_GPIO_Init+0x240>)
 8000882:	f001 fec1 	bl	8002608 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f248 0110 	movw	r1, #32784	@ 0x8010
 800088c:	4856      	ldr	r0, [pc, #344]	@ (80009e8 <MX_GPIO_Init+0x244>)
 800088e:	f001 febb 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4855      	ldr	r0, [pc, #340]	@ (80009ec <MX_GPIO_Init+0x248>)
 8000898:	f001 feb6 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Row_3_GPIO_Port, Row_3_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2180      	movs	r1, #128	@ 0x80
 80008a0:	4853      	ldr	r0, [pc, #332]	@ (80009f0 <MX_GPIO_Init+0x24c>)
 80008a2:	f001 feb1 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2144      	movs	r1, #68	@ 0x44
 80008aa:	4852      	ldr	r0, [pc, #328]	@ (80009f4 <MX_GPIO_Init+0x250>)
 80008ac:	f001 feac 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Row_4_Pin|Row_1_Pin|Row_2_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	210d      	movs	r1, #13
 80008b4:	4850      	ldr	r0, [pc, #320]	@ (80009f8 <MX_GPIO_Init+0x254>)
 80008b6:	f001 fea7 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 80008c0:	484e      	ldr	r0, [pc, #312]	@ (80009fc <MX_GPIO_Init+0x258>)
 80008c2:	f001 fea1 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 80008cc:	484a      	ldr	r0, [pc, #296]	@ (80009f8 <MX_GPIO_Init+0x254>)
 80008ce:	f001 fe9b 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE7 PE8 PE12
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12
 80008d2:	f243 1384 	movw	r3, #12676	@ 0x3184
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008dc:	2302      	movs	r3, #2
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	2302      	movs	r3, #2
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	483e      	ldr	r0, [pc, #248]	@ (80009e4 <MX_GPIO_Init+0x240>)
 80008ec:	f001 fce0 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 80008f0:	f248 0310 	movw	r3, #32784	@ 0x8010
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008fa:	2302      	movs	r3, #2
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	2302      	movs	r3, #2
 8000900:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4837      	ldr	r0, [pc, #220]	@ (80009e8 <MX_GPIO_Init+0x244>)
 800090a:	f001 fcd1 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800090e:	2304      	movs	r3, #4
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000916:	2302      	movs	r3, #2
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2302      	movs	r3, #2
 800091c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	4831      	ldr	r0, [pc, #196]	@ (80009ec <MX_GPIO_Init+0x248>)
 8000926:	f001 fcc3 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Row_3_Pin */
  GPIO_InitStruct.Pin = Row_3_Pin;
 800092a:	2380      	movs	r3, #128	@ 0x80
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000932:	2301      	movs	r3, #1
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Row_3_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	482b      	ldr	r0, [pc, #172]	@ (80009f0 <MX_GPIO_Init+0x24c>)
 8000942:	f001 fcb5 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000946:	2344      	movs	r3, #68	@ 0x44
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800094e:	2302      	movs	r3, #2
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000952:	2302      	movs	r3, #2
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	4825      	ldr	r0, [pc, #148]	@ (80009f4 <MX_GPIO_Init+0x250>)
 800095e:	f001 fca7 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row_4_Pin Row_1_Pin Row_2_Pin */
  GPIO_InitStruct.Pin = Row_4_Pin|Row_1_Pin|Row_2_Pin;
 8000962:	230d      	movs	r3, #13
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096a:	2301      	movs	r3, #1
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	481f      	ldr	r0, [pc, #124]	@ (80009f8 <MX_GPIO_Init+0x254>)
 800097a:	f001 fc99 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800097e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	2302      	movs	r3, #2
 800098e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <MX_GPIO_Init+0x240>)
 8000998:	f001 fc8a 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800099c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a6:	2302      	movs	r3, #2
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009aa:	2302      	movs	r3, #2
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4811      	ldr	r0, [pc, #68]	@ (80009fc <MX_GPIO_Init+0x258>)
 80009b6:	f001 fc7b 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80009ba:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c4:	2302      	movs	r3, #2
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c8:	2302      	movs	r3, #2
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <MX_GPIO_Init+0x254>)
 80009d4:	f001 fc6c 	bl	80022b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3738      	adds	r7, #56	@ 0x38
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40021400 	.word	0x40021400
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020400 	.word	0x40020400
 80009f8:	40021800 	.word	0x40021800
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a12:	f001 f85d 	bl	8001ad0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a22:	231f      	movs	r3, #31
 8000a24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a26:	2387      	movs	r3, #135	@ 0x87
 8000a28:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a42:	463b      	mov	r3, r7
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f87b 	bl	8001b40 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a4a:	2004      	movs	r0, #4
 8000a4c:	f001 f858 	bl	8001b00 <HAL_MPU_Enable>

}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a08      	ldr	r2, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	@ 0x30
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a4a      	ldr	r2, [pc, #296]	@ (8000bf4 <HAL_ADC_MspInit+0x148>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	f040 808d 	bne.w	8000bea <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad0:	4b49      	ldr	r3, [pc, #292]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad4:	4a48      	ldr	r2, [pc, #288]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ada:	6453      	str	r3, [r2, #68]	@ 0x44
 8000adc:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae8:	4b43      	ldr	r3, [pc, #268]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	4a42      	ldr	r2, [pc, #264]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af4:	4b40      	ldr	r3, [pc, #256]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	4a3c      	ldr	r2, [pc, #240]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	4a36      	ldr	r2, [pc, #216]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <HAL_ADC_MspInit+0x14c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b30:	2309      	movs	r3, #9
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	482e      	ldr	r0, [pc, #184]	@ (8000bfc <HAL_ADC_MspInit+0x150>)
 8000b44:	f001 fbb4 	bl	80022b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4829      	ldr	r0, [pc, #164]	@ (8000c00 <HAL_ADC_MspInit+0x154>)
 8000b5c:	f001 fba8 	bl	80022b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b64:	2303      	movs	r3, #3
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4824      	ldr	r0, [pc, #144]	@ (8000c04 <HAL_ADC_MspInit+0x158>)
 8000b74:	f001 fb9c 	bl	80022b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b78:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000b7a:	4a24      	ldr	r2, [pc, #144]	@ (8000c0c <HAL_ADC_MspInit+0x160>)
 8000b7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b7e:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b84:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000b9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000ba2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000baa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000bb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bbe:	4812      	ldr	r0, [pc, #72]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000bc0:	f000 fffe 	bl	8001bc0 <HAL_DMA_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8000bca:	f7ff ff45 	bl	8000a58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000bd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_ADC_MspInit+0x15c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 10, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210a      	movs	r1, #10
 8000bde:	2012      	movs	r0, #18
 8000be0:	f000 ff3f 	bl	8001a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000be4:	2012      	movs	r0, #18
 8000be6:	f000 ff58 	bl	8001a9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bea:	bf00      	nop
 8000bec:	3730      	adds	r7, #48	@ 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40012000 	.word	0x40012000
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020800 	.word	0x40020800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020400 	.word	0x40020400
 8000c08:	20000070 	.word	0x20000070
 8000c0c:	40026410 	.word	0x40026410

08000c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <HAL_TIM_Base_MspInit+0x38>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10b      	bne.n	8000c3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40001000 	.word	0x40001000
 8000c4c:	40023800 	.word	0x40023800

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <NMI_Handler+0x4>

08000c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <MemManage_Handler+0x4>

08000c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca6:	f000 f88f 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <ADC_IRQHandler+0x10>)
 8000cb6:	f000 f8eb 	bl	8000e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000028 	.word	0x20000028

08000cc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <DMA2_Stream0_IRQHandler+0x10>)
 8000cca:	f001 f887 	bl	8001ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000070 	.word	0x20000070

08000cd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d00:	f7ff ffea 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	@ (8000d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f002 fb77 	bl	800341c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fbfb 	bl	8000528 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d40:	080034a4 	.word	0x080034a4
  ldr r2, =_sbss
 8000d44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d48:	200002f0 	.word	0x200002f0

08000d4c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <CAN1_RX0_IRQHandler>

08000d4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d52:	2003      	movs	r0, #3
 8000d54:	f000 fe7a 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d58:	200f      	movs	r0, #15
 8000d5a:	f000 f805 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5e:	f7ff fe81 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fe95 	bl	8001ab6 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000da4:	f000 fe5d 	bl	8001a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	@ (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	2000011c 	.word	0x2000011c

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	@ (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	2000011c 	.word	0x2000011c

08000e08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e031      	b.n	8000e82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d109      	bne.n	8000e3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fe40 	bl	8000aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d116      	bne.n	8000e74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <HAL_ADC_Init+0x84>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	f043 0202 	orr.w	r2, r3, #2
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 fba2 	bl	80015a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f023 0303 	bic.w	r3, r3, #3
 8000e6a:	f043 0201 	orr.w	r2, r3, #1
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e72:	e001      	b.n	8000e78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	ffffeefd 	.word	0xffffeefd

08000e90 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d049      	beq.n	8000f5a <HAL_ADC_IRQHandler+0xca>
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d046      	beq.n	8000f5a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d12b      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d127      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f00:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d119      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0220 	bic.w	r2, r2, #32
 8000f24:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d105      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f9aa 	bl	80012a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f06f 0212 	mvn.w	r2, #18
 8000f58:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f68:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d057      	beq.n	8001020 <HAL_ADC_IRQHandler+0x190>
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d054      	beq.n	8001020 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d139      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d12b      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d124      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11d      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d119      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 fc41 	bl	8001898 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f06f 020c 	mvn.w	r2, #12
 800101e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800102e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d017      	beq.n	8001066 <HAL_ADC_IRQHandler+0x1d6>
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d014      	beq.n	8001066 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10d      	bne.n	8001066 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f938 	bl	80012cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f06f 0201 	mvn.w	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001074:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d015      	beq.n	80010a8 <HAL_ADC_IRQHandler+0x218>
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d012      	beq.n	80010a8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f06f 0220 	mvn.w	r2, #32
 8001096:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f921 	bl	80012e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f06f 0220 	mvn.w	r2, #32
 80010a6:	601a      	str	r2, [r3, #0]
  }
}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_Start_DMA+0x1e>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e0d4      	b.n	8001278 <HAL_ADC_Start_DMA+0x1c8>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d018      	beq.n	8001116 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010f4:	4b62      	ldr	r3, [pc, #392]	@ (8001280 <HAL_ADC_Start_DMA+0x1d0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a62      	ldr	r2, [pc, #392]	@ (8001284 <HAL_ADC_Start_DMA+0x1d4>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	0c9a      	lsrs	r2, r3, #18
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001108:	e002      	b.n	8001110 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3b01      	subs	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f9      	bne.n	800110a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b01      	cmp	r3, #1
 8001122:	f040 809c 	bne.w	800125e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800112a:	4b57      	ldr	r3, [pc, #348]	@ (8001288 <HAL_ADC_Start_DMA+0x1d8>)
 800112c:	4013      	ands	r3, r2
 800112e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800114c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800115c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001160:	d106      	bne.n	8001170 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f023 0206 	bic.w	r2, r3, #6
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	645a      	str	r2, [r3, #68]	@ 0x44
 800116e:	e002      	b.n	8001176 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001182:	4a42      	ldr	r2, [pc, #264]	@ (800128c <HAL_ADC_Start_DMA+0x1dc>)
 8001184:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118a:	4a41      	ldr	r2, [pc, #260]	@ (8001290 <HAL_ADC_Start_DMA+0x1e0>)
 800118c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001192:	4a40      	ldr	r2, [pc, #256]	@ (8001294 <HAL_ADC_Start_DMA+0x1e4>)
 8001194:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800119e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80011ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	334c      	adds	r3, #76	@ 0x4c
 80011ca:	4619      	mov	r1, r3
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f000 fda4 	bl	8001d1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <HAL_ADC_Start_DMA+0x1e8>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d10f      	bne.n	8001200 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d143      	bne.n	8001276 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	e03a      	b.n	8001276 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a25      	ldr	r2, [pc, #148]	@ (800129c <HAL_ADC_Start_DMA+0x1ec>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d10e      	bne.n	8001228 <HAL_ADC_Start_DMA+0x178>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001226:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001228:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <HAL_ADC_Start_DMA+0x1e8>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d120      	bne.n	8001276 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <HAL_ADC_Start_DMA+0x1f0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d11b      	bne.n	8001276 <HAL_ADC_Start_DMA+0x1c6>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d114      	bne.n	8001276 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	e00b      	b.n	8001276 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f043 0210 	orr.w	r2, r3, #16
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	f043 0201 	orr.w	r2, r3, #1
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	431bde83 	.word	0x431bde83
 8001288:	fffff8fe 	.word	0xfffff8fe
 800128c:	08001795 	.word	0x08001795
 8001290:	0800184f 	.word	0x0800184f
 8001294:	0800186b 	.word	0x0800186b
 8001298:	40012300 	.word	0x40012300
 800129c:	40012000 	.word	0x40012000
 80012a0:	40012200 	.word	0x40012200

080012a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1c>
 800130c:	2302      	movs	r3, #2
 800130e:	e136      	b.n	800157e <HAL_ADC_ConfigChannel+0x28a>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d93a      	bls.n	8001396 <HAL_ADC_ConfigChannel+0xa2>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001328:	d035      	beq.n	8001396 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68d9      	ldr	r1, [r3, #12]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	3b1e      	subs	r3, #30
 8001340:	2207      	movs	r2, #7
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	400a      	ands	r2, r1
 800134e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a8d      	ldr	r2, [pc, #564]	@ (800158c <HAL_ADC_ConfigChannel+0x298>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10a      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68d9      	ldr	r1, [r3, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	061a      	lsls	r2, r3, #24
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800136e:	e035      	b.n	80013dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68d9      	ldr	r1, [r3, #12]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	4603      	mov	r3, r0
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4403      	add	r3, r0
 8001388:	3b1e      	subs	r3, #30
 800138a:	409a      	lsls	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001394:	e022      	b.n	80013dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6919      	ldr	r1, [r3, #16]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43da      	mvns	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6919      	ldr	r1, [r3, #16]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	4603      	mov	r3, r0
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4403      	add	r3, r0
 80013d2:	409a      	lsls	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	d824      	bhi.n	800142e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	3b05      	subs	r3, #5
 80013f6:	221f      	movs	r2, #31
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43da      	mvns	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	400a      	ands	r2, r1
 8001404:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	fa00 f203 	lsl.w	r2, r0, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	635a      	str	r2, [r3, #52]	@ 0x34
 800142c:	e04c      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d824      	bhi.n	8001480 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3b23      	subs	r3, #35	@ 0x23
 8001448:	221f      	movs	r2, #31
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	400a      	ands	r2, r1
 8001456:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b23      	subs	r3, #35	@ 0x23
 8001472:	fa00 f203 	lsl.w	r2, r0, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	631a      	str	r2, [r3, #48]	@ 0x30
 800147e:	e023      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	3b41      	subs	r3, #65	@ 0x41
 8001492:	221f      	movs	r2, #31
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43da      	mvns	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	400a      	ands	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b41      	subs	r3, #65	@ 0x41
 80014bc:	fa00 f203 	lsl.w	r2, r0, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a30      	ldr	r2, [pc, #192]	@ (8001590 <HAL_ADC_ConfigChannel+0x29c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10a      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1f4>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014da:	d105      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80014dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 80014e2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80014e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a28      	ldr	r2, [pc, #160]	@ (8001590 <HAL_ADC_ConfigChannel+0x29c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10f      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x21e>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b12      	cmp	r3, #18
 80014f8:	d10b      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80014fa:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4a25      	ldr	r2, [pc, #148]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 8001500:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001504:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a22      	ldr	r2, [pc, #136]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 800150c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001510:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1e      	ldr	r2, [pc, #120]	@ (8001590 <HAL_ADC_ConfigChannel+0x29c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d12b      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x280>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <HAL_ADC_ConfigChannel+0x298>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d003      	beq.n	800152e <HAL_ADC_ConfigChannel+0x23a>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b11      	cmp	r3, #17
 800152c:	d122      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4a18      	ldr	r2, [pc, #96]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 8001534:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001538:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a15      	ldr	r2, [pc, #84]	@ (8001594 <HAL_ADC_ConfigChannel+0x2a0>)
 8001540:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001544:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a10      	ldr	r2, [pc, #64]	@ (800158c <HAL_ADC_ConfigChannel+0x298>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d111      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_ADC_ConfigChannel+0x2a4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a11      	ldr	r2, [pc, #68]	@ (800159c <HAL_ADC_ConfigChannel+0x2a8>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	0c9a      	lsrs	r2, r3, #18
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001566:	e002      	b.n	800156e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3b01      	subs	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f9      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	10000012 	.word	0x10000012
 8001590:	40012000 	.word	0x40012000
 8001594:	40012300 	.word	0x40012300
 8001598:	20000000 	.word	0x20000000
 800159c:	431bde83 	.word	0x431bde83

080015a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015a8:	4b78      	ldr	r3, [pc, #480]	@ (800178c <ADC_Init+0x1ec>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a77      	ldr	r2, [pc, #476]	@ (800178c <ADC_Init+0x1ec>)
 80015ae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80015b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80015b4:	4b75      	ldr	r3, [pc, #468]	@ (800178c <ADC_Init+0x1ec>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4973      	ldr	r1, [pc, #460]	@ (800178c <ADC_Init+0x1ec>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	021a      	lsls	r2, r3, #8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6899      	ldr	r1, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162e:	4a58      	ldr	r2, [pc, #352]	@ (8001790 <ADC_Init+0x1f0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d022      	beq.n	800167a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6899      	ldr	r1, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	e00f      	b.n	800169a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001698:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0202 	bic.w	r2, r2, #2
 80016a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	005a      	lsls	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01b      	beq.n	8001700 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6859      	ldr	r1, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	3b01      	subs	r3, #1
 80016f4:	035a      	lsls	r2, r3, #13
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	e007      	b.n	8001710 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800170e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	3b01      	subs	r3, #1
 800172c:	051a      	lsls	r2, r3, #20
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6899      	ldr	r1, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001752:	025a      	lsls	r2, r3, #9
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800176a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6899      	ldr	r1, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	029a      	lsls	r2, r3, #10
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	609a      	str	r2, [r3, #8]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40012300 	.word	0x40012300
 8001790:	0f000001 	.word	0x0f000001

08001794 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d13c      	bne.n	8001828 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d12b      	bne.n	8001820 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d127      	bne.n	8001820 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d119      	bne.n	8001820 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0220 	bic.w	r2, r2, #32
 80017fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7ff fd3f 	bl	80012a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001826:	e00e      	b.n	8001846 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff fd53 	bl	80012e0 <HAL_ADC_ErrorCallback>
}
 800183a:	e004      	b.n	8001846 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fd2b 	bl	80012b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001876:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2240      	movs	r2, #64	@ 0x40
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	f043 0204 	orr.w	r2, r3, #4
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff fd28 	bl	80012e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <__NVIC_SetPriorityGrouping+0x40>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <__NVIC_SetPriorityGrouping+0x40>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	05fa0000 	.word	0x05fa0000

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4907      	ldr	r1, [pc, #28]	@ (8001948 <__NVIC_EnableIRQ+0x38>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	@ (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	@ (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	@ 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff29 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a74:	f7ff ff3e 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff8e 	bl	80019a0 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5d 	bl	800194c <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff31 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffa2 	bl	8001a08 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ad4:	f3bf 8f5f 	dmb	sy
}
 8001ad8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <HAL_MPU_Disable+0x28>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	4a06      	ldr	r2, [pc, #24]	@ (8001af8 <HAL_MPU_Disable+0x28>)
 8001ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_MPU_Disable+0x2c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00
 8001afc:	e000ed90 	.word	0xe000ed90

08001b00 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b08:	4a0b      	ldr	r2, [pc, #44]	@ (8001b38 <HAL_MPU_Enable+0x38>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_MPU_Enable+0x3c>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	4a09      	ldr	r2, [pc, #36]	@ (8001b3c <HAL_MPU_Enable+0x3c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b1e:	f3bf 8f4f 	dsb	sy
}
 8001b22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b24:	f3bf 8f6f 	isb	sy
}
 8001b28:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed90 	.word	0xe000ed90
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	785a      	ldrb	r2, [r3, #1]
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <HAL_MPU_ConfigRegion+0x7c>)
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b50:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <HAL_MPU_ConfigRegion+0x7c>)
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	4a19      	ldr	r2, [pc, #100]	@ (8001bbc <HAL_MPU_ConfigRegion+0x7c>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b5c:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_MPU_ConfigRegion+0x7c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7b1b      	ldrb	r3, [r3, #12]
 8001b68:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7adb      	ldrb	r3, [r3, #11]
 8001b6e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7a9b      	ldrb	r3, [r3, #10]
 8001b76:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7b5b      	ldrb	r3, [r3, #13]
 8001b7e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7b9b      	ldrb	r3, [r3, #14]
 8001b86:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7bdb      	ldrb	r3, [r3, #15]
 8001b8e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7a5b      	ldrb	r3, [r3, #9]
 8001b96:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7a1b      	ldrb	r3, [r3, #8]
 8001b9e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ba0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001baa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bac:	6113      	str	r3, [r2, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed90 	.word	0xe000ed90

08001bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff f910 	bl	8000df0 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e099      	b.n	8001d10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfc:	e00f      	b.n	8001c1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfe:	f7ff f8f7 	bl	8000df0 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d908      	bls.n	8001c1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2203      	movs	r2, #3
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e078      	b.n	8001d10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e8      	bne.n	8001bfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4b38      	ldr	r3, [pc, #224]	@ (8001d18 <HAL_DMA_Init+0x158>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d107      	bne.n	8001c88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	4313      	orrs	r3, r2
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f023 0307 	bic.w	r3, r3, #7
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d117      	bne.n	8001ce2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00e      	beq.n	8001ce2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fa77 	bl	80021b8 <DMA_CheckFifoParam>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2240      	movs	r2, #64	@ 0x40
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e016      	b.n	8001d10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fa2e 	bl	800214c <DMA_CalcBaseAndBitshift>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf8:	223f      	movs	r2, #63	@ 0x3f
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	e010803f 	.word	0xe010803f

08001d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_DMA_Start_IT+0x26>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e048      	b.n	8001dd4 <HAL_DMA_Start_IT+0xb8>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d137      	bne.n	8001dc6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f9c0 	bl	80020f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d74:	223f      	movs	r2, #63	@ 0x3f
 8001d76:	409a      	lsls	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0216 	orr.w	r2, r2, #22
 8001d8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d9a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d007      	beq.n	8001db4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0208 	orr.w	r2, r2, #8
 8001db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e005      	b.n	8001dd2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001de8:	4b8e      	ldr	r3, [pc, #568]	@ (8002024 <HAL_DMA_IRQHandler+0x248>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a8e      	ldr	r2, [pc, #568]	@ (8002028 <HAL_DMA_IRQHandler+0x24c>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a9b      	lsrs	r3, r3, #10
 8001df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e06:	2208      	movs	r2, #8
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01a      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0204 	bic.w	r2, r2, #4
 8001e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e34:	2208      	movs	r2, #8
 8001e36:	409a      	lsls	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d012      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e76:	f043 0202 	orr.w	r2, r3, #2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	2204      	movs	r2, #4
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d012      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb8:	2210      	movs	r2, #16
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d043      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d03c      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d018      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d024      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
 8001f0a:	e01f      	b.n	8001f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d01b      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
 8001f1c:	e016      	b.n	8001f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0208 	bic.w	r2, r2, #8
 8001f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	2220      	movs	r2, #32
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 808f 	beq.w	800207c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8087 	beq.w	800207c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f72:	2220      	movs	r2, #32
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d136      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0216 	bic.w	r2, r2, #22
 8001f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <HAL_DMA_IRQHandler+0x1da>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0208 	bic.w	r2, r2, #8
 8001fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fca:	223f      	movs	r2, #63	@ 0x3f
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d07e      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	4798      	blx	r3
        }
        return;
 8001ff2:	e079      	b.n	80020e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01d      	beq.n	800203e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10d      	bne.n	800202c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002014:	2b00      	cmp	r3, #0
 8002016:	d031      	beq.n	800207c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
 8002020:	e02c      	b.n	800207c <HAL_DMA_IRQHandler+0x2a0>
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000
 8002028:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d023      	beq.n	800207c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e01e      	b.n	800207c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10f      	bne.n	800206c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0210 	bic.w	r2, r2, #16
 800205a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002080:	2b00      	cmp	r3, #0
 8002082:	d032      	beq.n	80020ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d022      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2205      	movs	r2, #5
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d307      	bcc.n	80020c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f2      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x2cc>
 80020c2:	e000      	b.n	80020c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
 80020e6:	e000      	b.n	80020ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80020e8:	bf00      	nop
    }
  }
}
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800210c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b40      	cmp	r3, #64	@ 0x40
 800211c:	d108      	bne.n	8002130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800212e:	e007      	b.n	8002140 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	60da      	str	r2, [r3, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	3b10      	subs	r3, #16
 800215c:	4a13      	ldr	r2, [pc, #76]	@ (80021ac <DMA_CalcBaseAndBitshift+0x60>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002166:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <DMA_CalcBaseAndBitshift+0x64>)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d908      	bls.n	800218c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002182:	4013      	ands	r3, r2
 8002184:	1d1a      	adds	r2, r3, #4
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	@ 0x58
 800218a:	e006      	b.n	800219a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002194:	4013      	ands	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	aaaaaaab 	.word	0xaaaaaaab
 80021b0:	0800348c 	.word	0x0800348c
 80021b4:	fffffc00 	.word	0xfffffc00

080021b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11f      	bne.n	8002212 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d856      	bhi.n	8002286 <DMA_CheckFifoParam+0xce>
 80021d8:	a201      	add	r2, pc, #4	@ (adr r2, 80021e0 <DMA_CheckFifoParam+0x28>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	08002203 	.word	0x08002203
 80021e8:	080021f1 	.word	0x080021f1
 80021ec:	08002287 	.word	0x08002287
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d046      	beq.n	800228a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002200:	e043      	b.n	800228a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002206:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800220a:	d140      	bne.n	800228e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002210:	e03d      	b.n	800228e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800221a:	d121      	bne.n	8002260 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d837      	bhi.n	8002292 <DMA_CheckFifoParam+0xda>
 8002222:	a201      	add	r2, pc, #4	@ (adr r2, 8002228 <DMA_CheckFifoParam+0x70>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	08002239 	.word	0x08002239
 800222c:	0800223f 	.word	0x0800223f
 8002230:	08002239 	.word	0x08002239
 8002234:	08002251 	.word	0x08002251
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      break;
 800223c:	e030      	b.n	80022a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d025      	beq.n	8002296 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224e:	e022      	b.n	8002296 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002258:	d11f      	bne.n	800229a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800225e:	e01c      	b.n	800229a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d903      	bls.n	800226e <DMA_CheckFifoParam+0xb6>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d003      	beq.n	8002274 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800226c:	e018      	b.n	80022a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
      break;
 8002272:	e015      	b.n	80022a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00e      	beq.n	800229e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e00b      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 8002286:	bf00      	nop
 8002288:	e00a      	b.n	80022a0 <DMA_CheckFifoParam+0xe8>
      break;
 800228a:	bf00      	nop
 800228c:	e008      	b.n	80022a0 <DMA_CheckFifoParam+0xe8>
      break;
 800228e:	bf00      	nop
 8002290:	e006      	b.n	80022a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002292:	bf00      	nop
 8002294:	e004      	b.n	80022a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002296:	bf00      	nop
 8002298:	e002      	b.n	80022a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800229a:	bf00      	nop
 800229c:	e000      	b.n	80022a0 <DMA_CheckFifoParam+0xe8>
      break;
 800229e:	bf00      	nop
    }
  } 
  
  return status; 
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e175      	b.n	80025bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 8164 	bne.w	80025b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d005      	beq.n	8002306 <HAL_GPIO_Init+0x56>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d130      	bne.n	8002368 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 0201 	and.w	r2, r3, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b03      	cmp	r3, #3
 8002372:	d017      	beq.n	80023a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d123      	bne.n	80023f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	220f      	movs	r2, #15
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	69b9      	ldr	r1, [r7, #24]
 80023f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80be 	beq.w	80025b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	4b66      	ldr	r3, [pc, #408]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	4a65      	ldr	r2, [pc, #404]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002444:	6453      	str	r3, [r2, #68]	@ 0x44
 8002446:	4b63      	ldr	r3, [pc, #396]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002452:	4a61      	ldr	r2, [pc, #388]	@ (80025d8 <HAL_GPIO_Init+0x328>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a58      	ldr	r2, [pc, #352]	@ (80025dc <HAL_GPIO_Init+0x32c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d037      	beq.n	80024ee <HAL_GPIO_Init+0x23e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a57      	ldr	r2, [pc, #348]	@ (80025e0 <HAL_GPIO_Init+0x330>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d031      	beq.n	80024ea <HAL_GPIO_Init+0x23a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a56      	ldr	r2, [pc, #344]	@ (80025e4 <HAL_GPIO_Init+0x334>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d02b      	beq.n	80024e6 <HAL_GPIO_Init+0x236>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a55      	ldr	r2, [pc, #340]	@ (80025e8 <HAL_GPIO_Init+0x338>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d025      	beq.n	80024e2 <HAL_GPIO_Init+0x232>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a54      	ldr	r2, [pc, #336]	@ (80025ec <HAL_GPIO_Init+0x33c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01f      	beq.n	80024de <HAL_GPIO_Init+0x22e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a53      	ldr	r2, [pc, #332]	@ (80025f0 <HAL_GPIO_Init+0x340>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <HAL_GPIO_Init+0x22a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a52      	ldr	r2, [pc, #328]	@ (80025f4 <HAL_GPIO_Init+0x344>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0x226>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a51      	ldr	r2, [pc, #324]	@ (80025f8 <HAL_GPIO_Init+0x348>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_GPIO_Init+0x222>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a50      	ldr	r2, [pc, #320]	@ (80025fc <HAL_GPIO_Init+0x34c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <HAL_GPIO_Init+0x21e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002600 <HAL_GPIO_Init+0x350>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_GPIO_Init+0x21a>
 80024c6:	2309      	movs	r3, #9
 80024c8:	e012      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ca:	230a      	movs	r3, #10
 80024cc:	e010      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ce:	2308      	movs	r3, #8
 80024d0:	e00e      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e00c      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024d6:	2306      	movs	r3, #6
 80024d8:	e00a      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024da:	2305      	movs	r3, #5
 80024dc:	e008      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024de:	2304      	movs	r3, #4
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024e2:	2303      	movs	r3, #3
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ee:	2300      	movs	r3, #0
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	f002 0203 	and.w	r2, r2, #3
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	4093      	lsls	r3, r2
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002500:	4935      	ldr	r1, [pc, #212]	@ (80025d8 <HAL_GPIO_Init+0x328>)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250e:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <HAL_GPIO_Init+0x354>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002532:	4a34      	ldr	r2, [pc, #208]	@ (8002604 <HAL_GPIO_Init+0x354>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002538:	4b32      	ldr	r3, [pc, #200]	@ (8002604 <HAL_GPIO_Init+0x354>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800255c:	4a29      	ldr	r2, [pc, #164]	@ (8002604 <HAL_GPIO_Init+0x354>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002562:	4b28      	ldr	r3, [pc, #160]	@ (8002604 <HAL_GPIO_Init+0x354>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002586:	4a1f      	ldr	r2, [pc, #124]	@ (8002604 <HAL_GPIO_Init+0x354>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_GPIO_Init+0x354>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b0:	4a14      	ldr	r2, [pc, #80]	@ (8002604 <HAL_GPIO_Init+0x354>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	f67f ae86 	bls.w	80022d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3724      	adds	r7, #36	@ 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40013800 	.word	0x40013800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	40020400 	.word	0x40020400
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020c00 	.word	0x40020c00
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40021400 	.word	0x40021400
 80025f4:	40021800 	.word	0x40021800
 80025f8:	40021c00 	.word	0x40021c00
 80025fc:	40022000 	.word	0x40022000
 8002600:	40022400 	.word	0x40022400
 8002604:	40013c00 	.word	0x40013c00

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e29b      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8087 	beq.w	800276e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002660:	4b96      	ldr	r3, [pc, #600]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b04      	cmp	r3, #4
 800266a:	d00c      	beq.n	8002686 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266c:	4b93      	ldr	r3, [pc, #588]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d112      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
 8002678:	4b90      	ldr	r3, [pc, #576]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002684:	d10b      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002686:	4b8d      	ldr	r3, [pc, #564]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d06c      	beq.n	800276c <HAL_RCC_OscConfig+0x130>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d168      	bne.n	800276c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e275      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x7a>
 80026a8:	4b84      	ldr	r3, [pc, #528]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a83      	ldr	r2, [pc, #524]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e02e      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x9c>
 80026be:	4b7f      	ldr	r3, [pc, #508]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7e      	ldr	r2, [pc, #504]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b7c      	ldr	r3, [pc, #496]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7b      	ldr	r2, [pc, #492]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0xc0>
 80026e2:	4b76      	ldr	r3, [pc, #472]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a75      	ldr	r2, [pc, #468]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b73      	ldr	r3, [pc, #460]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a72      	ldr	r2, [pc, #456]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026fc:	4b6f      	ldr	r3, [pc, #444]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6e      	ldr	r2, [pc, #440]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b6c      	ldr	r3, [pc, #432]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6b      	ldr	r2, [pc, #428]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fb68 	bl	8000df0 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fb64 	bl	8000df0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e229      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b61      	ldr	r3, [pc, #388]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fb54 	bl	8000df0 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fb50 	bl	8000df0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	@ 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e215      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	4b57      	ldr	r3, [pc, #348]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x110>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d069      	beq.n	800284e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277a:	4b50      	ldr	r3, [pc, #320]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b4d      	ldr	r3, [pc, #308]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b08      	cmp	r3, #8
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_OscConfig+0x190>
 8002792:	4b4a      	ldr	r3, [pc, #296]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	4b47      	ldr	r3, [pc, #284]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_RCC_OscConfig+0x17a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1e9      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	493d      	ldr	r1, [pc, #244]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	e040      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d023      	beq.n	800281c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d4:	4b39      	ldr	r3, [pc, #228]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a38      	ldr	r2, [pc, #224]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fb06 	bl	8000df0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fb02 	bl	8000df0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1c7      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b30      	ldr	r3, [pc, #192]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b2d      	ldr	r3, [pc, #180]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4929      	ldr	r1, [pc, #164]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
 800281a:	e018      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281c:	4b27      	ldr	r3, [pc, #156]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a26      	ldr	r2, [pc, #152]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fae2 	bl	8000df0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe fade 	bl	8000df0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1a3      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1e      	ldr	r3, [pc, #120]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d038      	beq.n	80028cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002866:	4a15      	ldr	r2, [pc, #84]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7fe fabf 	bl	8000df0 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe fabb 	bl	8000df0 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e180      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x23a>
 8002894:	e01a      	b.n	80028cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289a:	4a08      	ldr	r2, [pc, #32]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7fe faa5 	bl	8000df0 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028aa:	f7fe faa1 	bl	8000df0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d903      	bls.n	80028c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e166      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
 80028bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b92      	ldr	r3, [pc, #584]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a4 	beq.w	8002a22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b8c      	ldr	r3, [pc, #560]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4b89      	ldr	r3, [pc, #548]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	4a88      	ldr	r2, [pc, #544]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f2:	4b86      	ldr	r3, [pc, #536]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002902:	4b83      	ldr	r3, [pc, #524]	@ (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800290e:	4b80      	ldr	r3, [pc, #512]	@ (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7f      	ldr	r2, [pc, #508]	@ (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fe fa69 	bl	8000df0 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe fa65 	bl	8000df0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	@ 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e12a      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002934:	4b76      	ldr	r3, [pc, #472]	@ (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x31a>
 8002948:	4b70      	ldr	r3, [pc, #448]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a6f      	ldr	r2, [pc, #444]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	e02d      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x33c>
 800295e:	4b6b      	ldr	r3, [pc, #428]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	4a6a      	ldr	r2, [pc, #424]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	@ 0x70
 800296a:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	4a67      	ldr	r2, [pc, #412]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	@ 0x70
 8002976:	e01c      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x35e>
 8002980:	4b62      	ldr	r3, [pc, #392]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002984:	4a61      	ldr	r2, [pc, #388]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	@ 0x70
 800298c:	4b5f      	ldr	r3, [pc, #380]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002990:	4a5e      	ldr	r2, [pc, #376]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	@ 0x70
 8002998:	e00b      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 800299a:	4b5c      	ldr	r3, [pc, #368]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	4a5b      	ldr	r2, [pc, #364]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a6:	4b59      	ldr	r3, [pc, #356]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029aa:	4a58      	ldr	r2, [pc, #352]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d015      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe fa19 	bl	8000df0 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe fa15 	bl	8000df0 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0d8      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ee      	beq.n	80029c2 <HAL_RCC_OscConfig+0x386>
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fa03 	bl	8000df0 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe f9ff 	bl	8000df0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0c2      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	4b41      	ldr	r3, [pc, #260]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b3d      	ldr	r3, [pc, #244]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80ae 	beq.w	8002b88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2c:	4b37      	ldr	r3, [pc, #220]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d06d      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d14b      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b32      	ldr	r3, [pc, #200]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a31      	ldr	r2, [pc, #196]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe f9d0 	bl	8000df0 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe f9cc 	bl	8000df0 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e091      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	4b29      	ldr	r3, [pc, #164]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	071b      	lsls	r3, r3, #28
 8002a9e:	491b      	ldr	r1, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe f99e 	bl	8000df0 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe f99a 	bl	8000df0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e05f      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
 8002ad6:	e057      	b.n	8002b88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0b      	ldr	r2, [pc, #44]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f984 	bl	8000df0 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe f980 	bl	8000df0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e045      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b03      	ldr	r3, [pc, #12]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x4b0>
 8002b0a:	e03d      	b.n	8002b88 <HAL_RCC_OscConfig+0x54c>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b14:	4b1f      	ldr	r3, [pc, #124]	@ (8002b94 <HAL_RCC_OscConfig+0x558>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d030      	beq.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d129      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d122      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d119      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10f      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d0      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d910      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b67      	ldr	r3, [pc, #412]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 020f 	bic.w	r2, r3, #15
 8002bc6:	4965      	ldr	r1, [pc, #404]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b63      	ldr	r3, [pc, #396]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0b8      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf8:	4b59      	ldr	r3, [pc, #356]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c10:	4b53      	ldr	r3, [pc, #332]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a52      	ldr	r2, [pc, #328]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494d      	ldr	r1, [pc, #308]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d040      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d115      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b41      	ldr	r3, [pc, #260]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e073      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06b      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4936      	ldr	r1, [pc, #216]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fe f8b0 	bl	8000df0 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7fe f8ac 	bl	8000df0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e053      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b27      	ldr	r3, [pc, #156]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d210      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 020f 	bic.w	r2, r3, #15
 8002cd2:	4922      	ldr	r1, [pc, #136]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e032      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4916      	ldr	r1, [pc, #88]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490e      	ldr	r1, [pc, #56]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490a      	ldr	r1, [pc, #40]	@ (8002d64 <HAL_RCC_ClockConfig+0x1cc>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a09      	ldr	r2, [pc, #36]	@ (8002d68 <HAL_RCC_ClockConfig+0x1d0>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d46:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <HAL_RCC_ClockConfig+0x1d4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe f80c 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	0800347c 	.word	0x0800347c
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b090      	sub	sp, #64	@ 0x40
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d80:	2300      	movs	r3, #0
 8002d82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d88:	4b59      	ldr	r3, [pc, #356]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d00d      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f200 80a1 	bhi.w	8002edc <HAL_RCC_GetSysClockFreq+0x16c>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x3a>
 8002da2:	e09b      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b53      	ldr	r3, [pc, #332]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002da8:	e09b      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002daa:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dae:	e098      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002db8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dba:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d028      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	2200      	movs	r2, #0
 8002dce:	623b      	str	r3, [r7, #32]
 8002dd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ddc:	fb03 f201 	mul.w	r2, r3, r1
 8002de0:	2300      	movs	r3, #0
 8002de2:	fb00 f303 	mul.w	r3, r0, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	4a43      	ldr	r2, [pc, #268]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dea:	fba0 1202 	umull	r1, r2, r0, r2
 8002dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002df0:	460a      	mov	r2, r1
 8002df2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002df6:	4413      	add	r3, r2
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	61fa      	str	r2, [r7, #28]
 8002e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e0a:	f7fd fa15 	bl	8000238 <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4613      	mov	r3, r2
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e16:	e053      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e18:	4b35      	ldr	r3, [pc, #212]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	2200      	movs	r2, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	617a      	str	r2, [r7, #20]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e2a:	f04f 0b00 	mov.w	fp, #0
 8002e2e:	4652      	mov	r2, sl
 8002e30:	465b      	mov	r3, fp
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	0159      	lsls	r1, r3, #5
 8002e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e40:	0150      	lsls	r0, r2, #5
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	ebb2 080a 	subs.w	r8, r2, sl
 8002e4a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e62:	ebb2 0408 	subs.w	r4, r2, r8
 8002e66:	eb63 0509 	sbc.w	r5, r3, r9
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	00eb      	lsls	r3, r5, #3
 8002e74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e78:	00e2      	lsls	r2, r4, #3
 8002e7a:	4614      	mov	r4, r2
 8002e7c:	461d      	mov	r5, r3
 8002e7e:	eb14 030a 	adds.w	r3, r4, sl
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	eb45 030b 	adc.w	r3, r5, fp
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e96:	4629      	mov	r1, r5
 8002e98:	028b      	lsls	r3, r1, #10
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	028a      	lsls	r2, r1, #10
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	60fa      	str	r2, [r7, #12]
 8002eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb4:	f7fd f9c0 	bl	8000238 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ed0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eda:	e002      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ede:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3740      	adds	r7, #64	@ 0x40
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	00f42400 	.word	0x00f42400
 8002ef8:	017d7840 	.word	0x017d7840

08002efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e049      	b.n	8002fa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fe74 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 f8ae 	bl	800309c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d001      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e054      	b.n	800306e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	@ (800307c <HAL_TIM_Base_Start_IT+0xd0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d022      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fee:	d01d      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a22      	ldr	r2, [pc, #136]	@ (8003080 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d018      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <HAL_TIM_Base_Start_IT+0xd8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1f      	ldr	r2, [pc, #124]	@ (8003088 <HAL_TIM_Base_Start_IT+0xdc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00e      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1e      	ldr	r2, [pc, #120]	@ (800308c <HAL_TIM_Base_Start_IT+0xe0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d009      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1c      	ldr	r2, [pc, #112]	@ (8003090 <HAL_TIM_Base_Start_IT+0xe4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_TIM_Base_Start_IT+0xe8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d115      	bne.n	8003058 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_TIM_Base_Start_IT+0xec>)
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b06      	cmp	r3, #6
 800303c:	d015      	beq.n	800306a <HAL_TIM_Base_Start_IT+0xbe>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d011      	beq.n	800306a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003056:	e008      	b.n	800306a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e000      	b.n	800306c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800
 8003088:	40000c00 	.word	0x40000c00
 800308c:	40010400 	.word	0x40010400
 8003090:	40014000 	.word	0x40014000
 8003094:	40001800 	.word	0x40001800
 8003098:	00010007 	.word	0x00010007

0800309c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a46      	ldr	r2, [pc, #280]	@ (80031c8 <TIM_Base_SetConfig+0x12c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d013      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ba:	d00f      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a43      	ldr	r2, [pc, #268]	@ (80031cc <TIM_Base_SetConfig+0x130>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00b      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a42      	ldr	r2, [pc, #264]	@ (80031d0 <TIM_Base_SetConfig+0x134>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d007      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a41      	ldr	r2, [pc, #260]	@ (80031d4 <TIM_Base_SetConfig+0x138>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a40      	ldr	r2, [pc, #256]	@ (80031d8 <TIM_Base_SetConfig+0x13c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d108      	bne.n	80030ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a35      	ldr	r2, [pc, #212]	@ (80031c8 <TIM_Base_SetConfig+0x12c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d02b      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fc:	d027      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a32      	ldr	r2, [pc, #200]	@ (80031cc <TIM_Base_SetConfig+0x130>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d023      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a31      	ldr	r2, [pc, #196]	@ (80031d0 <TIM_Base_SetConfig+0x134>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a30      	ldr	r2, [pc, #192]	@ (80031d4 <TIM_Base_SetConfig+0x138>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01b      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2f      	ldr	r2, [pc, #188]	@ (80031d8 <TIM_Base_SetConfig+0x13c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d017      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2e      	ldr	r2, [pc, #184]	@ (80031dc <TIM_Base_SetConfig+0x140>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2d      	ldr	r2, [pc, #180]	@ (80031e0 <TIM_Base_SetConfig+0x144>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00f      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2c      	ldr	r2, [pc, #176]	@ (80031e4 <TIM_Base_SetConfig+0x148>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00b      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2b      	ldr	r2, [pc, #172]	@ (80031e8 <TIM_Base_SetConfig+0x14c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <TIM_Base_SetConfig+0x150>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a29      	ldr	r2, [pc, #164]	@ (80031f0 <TIM_Base_SetConfig+0x154>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d108      	bne.n	8003160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a10      	ldr	r2, [pc, #64]	@ (80031c8 <TIM_Base_SetConfig+0x12c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_Base_SetConfig+0xf8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <TIM_Base_SetConfig+0x13c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d103      	bne.n	800319c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f023 0201 	bic.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	611a      	str	r2, [r3, #16]
  }
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40010000 	.word	0x40010000
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800
 80031d4:	40000c00 	.word	0x40000c00
 80031d8:	40010400 	.word	0x40010400
 80031dc:	40014000 	.word	0x40014000
 80031e0:	40014400 	.word	0x40014400
 80031e4:	40014800 	.word	0x40014800
 80031e8:	40001800 	.word	0x40001800
 80031ec:	40001c00 	.word	0x40001c00
 80031f0:	40002000 	.word	0x40002000

080031f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003208:	2302      	movs	r3, #2
 800320a:	e06d      	b.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a30      	ldr	r2, [pc, #192]	@ (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2f      	ldr	r2, [pc, #188]	@ (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d108      	bne.n	8003252 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003246:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003258:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a20      	ldr	r2, [pc, #128]	@ (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d022      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327e:	d01d      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1d      	ldr	r2, [pc, #116]	@ (80032fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d018      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1a      	ldr	r2, [pc, #104]	@ (8003304 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00e      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a15      	ldr	r2, [pc, #84]	@ (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a16      	ldr	r2, [pc, #88]	@ (8003308 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a15      	ldr	r2, [pc, #84]	@ (800330c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10c      	bne.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40010400 	.word	0x40010400
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800
 8003304:	40000c00 	.word	0x40000c00
 8003308:	40014000 	.word	0x40014000
 800330c:	40001800 	.word	0x40001800

08003310 <initialize_taxels>:
 * @param taxels Array de taxels a ser inicializado.
 * @param num Número total de taxels.
 */


void initialize_taxels(Taxel *taxels, int num) {
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < num; i++) {
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e04c      	b.n	80033ba <initialize_taxels+0xaa>
        taxels[i].V_sensor_old = 0;
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
        taxels[i].V_sensor_new = 3.3; // Exemplo de valor inicial
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	4a22      	ldr	r2, [pc, #136]	@ (80033d0 <initialize_taxels+0xc0>)
 8003348:	605a      	str	r2, [r3, #4]
        taxels[i].v_m_old = -30;
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	461a      	mov	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	4a1e      	ldr	r2, [pc, #120]	@ (80033d4 <initialize_taxels+0xc4>)
 800335c:	609a      	str	r2, [r3, #8]
        taxels[i].v_m_new = -30;
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <initialize_taxels+0xc4>)
 8003370:	60da      	str	r2, [r3, #12]
        taxels[i].u_old = 0;
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	461a      	mov	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
        taxels[i].u_new = 0;
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	461a      	mov	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	615a      	str	r2, [r3, #20]
        taxels[i].I = 0;
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]
    for (int i = 0; i < num; i++) {
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	dbae      	blt.n	8003320 <initialize_taxels+0x10>
    }
}
 80033c2:	bf00      	nop
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40533333 	.word	0x40533333
 80033d4:	c1f00000 	.word	0xc1f00000

080033d8 <app_setup>:

void app_setup(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, buffer_size); // Iniciar ADC com DMA
 80033dc:	2304      	movs	r3, #4
 80033de:	461a      	mov	r2, r3
 80033e0:	4906      	ldr	r1, [pc, #24]	@ (80033fc <app_setup+0x24>)
 80033e2:	4807      	ldr	r0, [pc, #28]	@ (8003400 <app_setup+0x28>)
 80033e4:	f7fd fe64 	bl	80010b0 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start_IT(&htim6);
 80033e8:	4806      	ldr	r0, [pc, #24]	@ (8003404 <app_setup+0x2c>)
 80033ea:	f7ff fddf 	bl	8002fac <HAL_TIM_Base_Start_IT>
    initialize_taxels(taxels, NUM_TAXELS);
 80033ee:	2110      	movs	r1, #16
 80033f0:	4805      	ldr	r0, [pc, #20]	@ (8003408 <app_setup+0x30>)
 80033f2:	f7ff ff8d 	bl	8003310 <initialize_taxels>
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000120 	.word	0x20000120
 8003400:	20000028 	.word	0x20000028
 8003404:	200000d0 	.word	0x200000d0
 8003408:	20000130 	.word	0x20000130

0800340c <memset>:
 800340c:	4402      	add	r2, r0
 800340e:	4603      	mov	r3, r0
 8003410:	4293      	cmp	r3, r2
 8003412:	d100      	bne.n	8003416 <memset+0xa>
 8003414:	4770      	bx	lr
 8003416:	f803 1b01 	strb.w	r1, [r3], #1
 800341a:	e7f9      	b.n	8003410 <memset+0x4>

0800341c <__libc_init_array>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	4d0d      	ldr	r5, [pc, #52]	@ (8003454 <__libc_init_array+0x38>)
 8003420:	4c0d      	ldr	r4, [pc, #52]	@ (8003458 <__libc_init_array+0x3c>)
 8003422:	1b64      	subs	r4, r4, r5
 8003424:	10a4      	asrs	r4, r4, #2
 8003426:	2600      	movs	r6, #0
 8003428:	42a6      	cmp	r6, r4
 800342a:	d109      	bne.n	8003440 <__libc_init_array+0x24>
 800342c:	4d0b      	ldr	r5, [pc, #44]	@ (800345c <__libc_init_array+0x40>)
 800342e:	4c0c      	ldr	r4, [pc, #48]	@ (8003460 <__libc_init_array+0x44>)
 8003430:	f000 f818 	bl	8003464 <_init>
 8003434:	1b64      	subs	r4, r4, r5
 8003436:	10a4      	asrs	r4, r4, #2
 8003438:	2600      	movs	r6, #0
 800343a:	42a6      	cmp	r6, r4
 800343c:	d105      	bne.n	800344a <__libc_init_array+0x2e>
 800343e:	bd70      	pop	{r4, r5, r6, pc}
 8003440:	f855 3b04 	ldr.w	r3, [r5], #4
 8003444:	4798      	blx	r3
 8003446:	3601      	adds	r6, #1
 8003448:	e7ee      	b.n	8003428 <__libc_init_array+0xc>
 800344a:	f855 3b04 	ldr.w	r3, [r5], #4
 800344e:	4798      	blx	r3
 8003450:	3601      	adds	r6, #1
 8003452:	e7f2      	b.n	800343a <__libc_init_array+0x1e>
 8003454:	0800349c 	.word	0x0800349c
 8003458:	0800349c 	.word	0x0800349c
 800345c:	0800349c 	.word	0x0800349c
 8003460:	080034a0 	.word	0x080034a0

08003464 <_init>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr

08003470 <_fini>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr
